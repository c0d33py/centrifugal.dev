"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[8896],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>d});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=p(a),d=i,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||o;return a?t.createElement(m,s(s({ref:n},c),{},{components:a})):t.createElement(m,s({ref:n},c))}));function d(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=h;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<o;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},4731:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var t=a(7462),i=(a(7294),a(3905));const o={id:"channels",title:"Channels and namespaces"},s=void 0,r={unversionedId:"server/channels",id:"server/channels",title:"Channels and namespaces",description:"Upon connecting to a server, clients can subscribe to channels. A channel is one of the core concepts of Centrifugo. Most of the time when integrating Centrifugo, you will work with channels and determine the optimal channel configuration for your application.",source:"@site/docs/server/channels.md",sourceDirName:"server",slug:"/server/channels",permalink:"/docs/server/channels",draft:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/docs/server/channels.md",tags:[],version:"current",frontMatter:{id:"channels",title:"Channels and namespaces"},sidebar:"Guides",previous:{title:"Client JWT authentication",permalink:"/docs/server/authentication"},next:{title:"Channel permission model",permalink:"/docs/server/channel_permissions"}},l={},p=[{value:"What is a channel",id:"what-is-a-channel",level:2},{value:"Channel name rules",id:"channel-name-rules",level:2},{value:"namespace boundary (<code>:</code>)",id:"namespace-boundary-",level:3},{value:"user channel boundary (<code>#</code>)",id:"user-channel-boundary-",level:3},{value:"private channel prefix (<code>$</code>)",id:"private-channel-prefix-",level:3},{value:"Channel is just a string",id:"channel-is-just-a-string",level:3},{value:"Channel namespaces",id:"channel-namespaces",level:2},{value:"Channel options",id:"channel-options",level:2},{value:"presence",id:"presence",level:3},{value:"join_leave",id:"join_leave",level:3},{value:"force_push_join_leave",id:"force_push_join_leave",level:3},{value:"history_size",id:"history_size",level:3},{value:"history_ttl",id:"history_ttl",level:3},{value:"history_meta_ttl",id:"history_meta_ttl",level:3},{value:"force_positioning",id:"force_positioning",level:3},{value:"force_recovery",id:"force_recovery",level:3},{value:"allow_subscribe_for_client",id:"allow_subscribe_for_client",level:3},{value:"allow_subscribe_for_anonymous",id:"allow_subscribe_for_anonymous",level:3},{value:"allow_publish_for_subscriber",id:"allow_publish_for_subscriber",level:3},{value:"allow_publish_for_client",id:"allow_publish_for_client",level:3},{value:"allow_publish_for_anonymous",id:"allow_publish_for_anonymous",level:3},{value:"allow_history_for_subscriber",id:"allow_history_for_subscriber",level:3},{value:"allow_history_for_client",id:"allow_history_for_client",level:3},{value:"allow_history_for_anonymous",id:"allow_history_for_anonymous",level:3},{value:"allow_presence_for_subscriber",id:"allow_presence_for_subscriber",level:3},{value:"allow_presence_for_client",id:"allow_presence_for_client",level:3},{value:"allow_presence_for_anonymous",id:"allow_presence_for_anonymous",level:3},{value:"allow_user_limited_channels",id:"allow_user_limited_channels",level:3},{value:"channel_regex",id:"channel_regex",level:3},{value:"proxy_subscribe",id:"proxy_subscribe",level:3},{value:"proxy_publish",id:"proxy_publish",level:3},{value:"proxy_sub_refresh",id:"proxy_sub_refresh",level:3},{value:"proxy_subscribe_stream",id:"proxy_subscribe_stream",level:3},{value:"subscribe_proxy_name",id:"subscribe_proxy_name",level:3},{value:"publish_proxy_name",id:"publish_proxy_name",level:3},{value:"sub_refresh_proxy_name",id:"sub_refresh_proxy_name",level:3},{value:"subscribe_stream_proxy_name",id:"subscribe_stream_proxy_name",level:3},{value:"Channel config examples",id:"channel-config-examples",level:2}],c={toc:p};function u(e){let{components:n,...o}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Upon connecting to a server, clients can subscribe to channels. A channel is one of the core concepts of Centrifugo. Most of the time when integrating Centrifugo, you will work with channels and determine the optimal channel configuration for your application."),(0,i.kt)("h2",{id:"what-is-a-channel"},"What is a channel"),(0,i.kt)("p",null,"Centrifugo operates on a PUB/SUB model - it has publishers and subscribers. A channel acts as a conduit for publications. Clients can subscribe to a channel to receive all the real-time messages published there. Subscribers to a channel may also request information about the channel's online presence or its history."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"pub_sub",src:a(4478).Z,width:"3063",height:"1305"})),(0,i.kt)("p",null,"A channel is simply a string - names like ",(0,i.kt)("inlineCode",{parentName:"p"},"news"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"comments"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"personal_feed")," are examples of valid channel names. However, there are ",(0,i.kt)("a",{parentName:"p",href:"#channel-name-rules"},"predefined rules")," for these strings, as we will discuss later. You can define different behaviors for a channel using a range of available ",(0,i.kt)("a",{parentName:"p",href:"#channel-options"},"channel options"),"."),(0,i.kt)("p",null,"Channels are ephemeral \u2013 there is no need to create them explicitly. Channels are automatically created by Centrifugo as soon as the first client subscribes. Similarly, when the last subscriber leaves, the channel is automatically cleaned up."),(0,i.kt)("p",null,"A channel can be part of a channel namespace. ",(0,i.kt)("a",{parentName:"p",href:"#channel-namespaces"},"Channel namespacing")," is a mechanism to define different behaviors for various channels within Centrifugo. Using namespaces is the recommended approach to manage channels \u2013 enabling only those channel options which are necessary for the specific real-time feature you are implementing with Centrifugo."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Ensure you have defined a namespace in the configuration when using channel namespaces. Attempts to subscribe to a channel within an undefined namespace will result in ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/codes#unknown-channel"},"102: unknown channel")," errors.")),(0,i.kt)("h2",{id:"channel-name-rules"},"Channel name rules"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Only ASCII symbols must be used in a channel string"),"."),(0,i.kt)("p",null,"Channel name length limited by ",(0,i.kt)("inlineCode",{parentName:"p"},"255")," characters by default (controlled by configuration option ",(0,i.kt)("inlineCode",{parentName:"p"},"channel_max_length"),")."),(0,i.kt)("p",null,"Several symbols in channel names reserved for Centrifugo internal needs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},":")," \u2013 for namespace channel boundary (see below)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#")," \u2013 for user channel boundary (see below)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$")," \u2013 for private channel prefix (see below)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/")," \u2013 for ",(0,i.kt)("a",{parentName:"li",href:"/docs/pro/channel_patterns"},"Channel Patterns")," in Centrifugo PRO"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*")," \u2013 for the future Centrifugo needs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"&")," \u2013 for the future Centrifugo needs")),(0,i.kt)("h3",{id:"namespace-boundary-"},"namespace boundary (",(0,i.kt)("inlineCode",{parentName:"h3"},":"),")"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},":")," \u2013 is a channel namespace boundary. Namespaces are used to set custom options to a group of channels. Each channel belonging to the same namespace will have the same channel options. Read more about about ",(0,i.kt)("a",{parentName:"p",href:"#channel-namespaces"},"namespaces")," and ",(0,i.kt)("a",{parentName:"p",href:"#channel-options"},"channel options")," below."),(0,i.kt)("p",null,"If the channel is ",(0,i.kt)("inlineCode",{parentName:"p"},"public:chat")," - then Centrifugo will apply options to this channel from the channel namespace with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"public"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A namespace is a inalienable component of the channel name. If a user is subscribed to a channel with a namespace, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"public:chat"),", then you must publish messages to the ",(0,i.kt)("inlineCode",{parentName:"p"},"public:chat")," channel for them to be delivered to the user. There is often confusion among developers who try to publish messages to ",(0,i.kt)("inlineCode",{parentName:"p"},"chat"),", mistakenly believing that the namespace is stripped upon subscription. This is not the case. You must publish exactly to the same channel string you used for subscribing.")),(0,i.kt)("h3",{id:"user-channel-boundary-"},"user channel boundary (",(0,i.kt)("inlineCode",{parentName:"h3"},"#"),")"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"#")," symbol serves as the user channel boundary. It acts as a separator to create personal channels for users\u2014referred to as ",(0,i.kt)("em",{parentName:"p"},"user-limited channels"),"\u2014without requiring a subscription token."),(0,i.kt)("p",null,"For instance, if the channel is named ",(0,i.kt)("inlineCode",{parentName:"p"},"news#42"),", then only the user with ID ",(0,i.kt)("inlineCode",{parentName:"p"},"42")," can subscribe to this channel. Centrifugo identifies the user ID from the connection credentials provided in the connection JWT."),(0,i.kt)("p",null,"To create a user-limited channel within the ",(0,i.kt)("inlineCode",{parentName:"p"},"personal")," namespace, you might use a name such as ",(0,i.kt)("inlineCode",{parentName:"p"},"personal:user#42"),"."),(0,i.kt)("p",null,"Furthermore, it's possible to specify multiple user IDs in the channel name, separated by a comma: ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#42,43"),". In this case, only users with IDs ",(0,i.kt)("inlineCode",{parentName:"p"},"42")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"43")," are permitted to subscribe to this channel."),(0,i.kt)("p",null,"This setup is ideal for channels that have a static list of allowed users, such as channels for personal messages to a single user or dialogue channels between specific users. However, for dynamic access management of a channel for numerous users, this type of channel is not appropriate."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"User-limited channels must be enabled for a channel namespace using ",(0,i.kt)("a",{parentName:"p",href:"#allow_user_limited_channels"},"allow_user_limited_channels")," option. See below more information about channel options and channel namespaces. ")),(0,i.kt)("h3",{id:"private-channel-prefix-"},"private channel prefix (",(0,i.kt)("inlineCode",{parentName:"h3"},"$"),")"),(0,i.kt)("p",null,"Centrifugo maintains compatibility with its previous versions which had concept of private channels. In earlier versions \u2014 specifically Centrifugo v1, v2, and v3\u2014only \u2013 only channels beginning with ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," required a subscription JWT for subscribing. With Centrifugo v4, this is no longer the case; clients can subscribe to any channel if they have a valid subscription token."),(0,i.kt)("p",null,"However, for namespaces where the ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_subscribe_for_client")," option is activated, Centrifugo prohibits subscriptions to channels that start with the ",(0,i.kt)("inlineCode",{parentName:"p"},"private_channel_prefix")," (which defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),") unless a subscription token is provided. This restriction is designed to facilitate a secure migration to Centrifugo v4 or later versions."),(0,i.kt)("h3",{id:"channel-is-just-a-string"},"Channel is just a string"),(0,i.kt)("p",null,"Bear in mind that a channel is uniquely identified by its string representation. Do not assume that channels ",(0,i.kt)("inlineCode",{parentName:"p"},"$news")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"news")," are the same; they differ because their strings are not identical. Thus, if a user is subscribed to ",(0,i.kt)("inlineCode",{parentName:"p"},"$news"),", they will not receive messages published to ",(0,i.kt)("inlineCode",{parentName:"p"},"news"),"."),(0,i.kt)("p",null,"The channels ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#42,43")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#43,42")," are considered different as well. Centrifugo only applies permission checks when a user subscribes to a channel. So if user-limited channels are enabled then the user with ID ",(0,i.kt)("inlineCode",{parentName:"p"},"42")," will be able to subscribe on both ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#42,43")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#43,42"),". But Centrifugo does no magic regarding channel strings when keeping channel->to->subscribers map. So if the user subscribed on ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#42,43")," you must publish messages to exactly that channel: ",(0,i.kt)("inlineCode",{parentName:"p"},"dialog#42,43"),"."),(0,i.kt)("p",null,"The same reasoning applies to channels within namespaces. Channels ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:index")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," are not the same \u2014 they are distinct and, moreover, they belong to different namespaces. The concept of channel namespaces in Centrifugo will be discussed shortly."),(0,i.kt)("h2",{id:"channel-namespaces"},"Channel namespaces"),(0,i.kt)("p",null,"Centrifugo allows configuring a list of channel namespaces. Namespaces are optional but very useful. "),(0,i.kt)("p",null,"A namespace is a container for options applied for channels starting with the namespace name. This provides great control over channel behavior so you have a flexible way to define different channel options for different real-time features in the application."),(0,i.kt)("p",null,"A namespace acts as a container for options that are applied to channels starting with the namespace name. This provides great control over channel behavior, so you have a flexible way to define different channel options for various real-time features in the application."),(0,i.kt)("p",null,"Namespace has a name, and can contain all the channel options described below (with the same defaults)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - unique namespace name (name must consist of letters, numbers, underscores, or hyphens and be more than 2 symbols length i.e. satisfy regexp ",(0,i.kt)("inlineCode",{parentName:"li"},"^[-a-zA-Z0-9_]{2,}$"),").")),(0,i.kt)("p",null,"If you want to use namespace options for a channel - you must include namespace name into channel name with ",(0,i.kt)("inlineCode",{parentName:"p"},":")," as a separator:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"public:messages")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gossips:messages")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"public")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"gossips")," are namespace names. Centrifugo looks for ",(0,i.kt)("inlineCode",{parentName:"p"},":")," symbol in the channel name, if found \u2013 extracts the namespace name, and applies namespace options while processing protocol commands from a client."),(0,i.kt)("p",null,"All things together here is an example of ",(0,i.kt)("inlineCode",{parentName:"p"},"config.json")," which includes some top-level channel options set and has 2 additional channel namespaces configured:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n  "token_hmac_secret_key": "very-long-secret-key",\n  "api_key": "secret-api-key",\n  \n  "presence": true,\n  "history_size": 10,\n  "history_ttl": "30s",\n  \n  "namespaces": [\n    {\n      "name": "facts",\n      "history_size": 10,\n      "history_ttl": "300s"\n    },\n    {\n      "name": "gossips"\n    }\n  ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Channel ",(0,i.kt)("inlineCode",{parentName:"li"},"news")," will use globally defined channel options."),(0,i.kt)("li",{parentName:"ul"},"Channel ",(0,i.kt)("inlineCode",{parentName:"li"},"facts:sport")," will use ",(0,i.kt)("inlineCode",{parentName:"li"},"facts")," namespace options."),(0,i.kt)("li",{parentName:"ul"},"Channel ",(0,i.kt)("inlineCode",{parentName:"li"},"gossips:sport")," will use ",(0,i.kt)("inlineCode",{parentName:"li"},"gossips")," namespace options."),(0,i.kt)("li",{parentName:"ul"},"Channel ",(0,i.kt)("inlineCode",{parentName:"li"},"xxx:hello")," will result into subscription error since there is no ",(0,i.kt)("inlineCode",{parentName:"li"},"xxx")," namespace defined in the configuration above.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Channel namespaces also work with private channels and user-limited channels"),". For example, if you have a namespace called ",(0,i.kt)("inlineCode",{parentName:"p"},"dialogs")," then the private channel can be constructed as ",(0,i.kt)("inlineCode",{parentName:"p"},"$dialogs:gossips"),", user-limited channel can be constructed as ",(0,i.kt)("inlineCode",{parentName:"p"},"dialogs:dialog#1,2"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There is ",(0,i.kt)("strong",{parentName:"p"},"no inheritance")," in channel options and namespaces \u2013 for example, you defined ",(0,i.kt)("inlineCode",{parentName:"p"},"presence: true")," on a top level of configuration and then defined a namespace \u2013 that namespace won't have online presence enabled - you must enable it for a namespace explicitly.")),(0,i.kt)("p",null,"There are many options which can be set for channel namespace (on top-level and to named one) to modify behavior of channels belonging to a namespace. Below we describe all these options. "),(0,i.kt)("h2",{id:"channel-options"},"Channel options"),(0,i.kt)("p",null,"Channel behavior can be modified by using channel options. Channel options can be defined on configuration top-level and for every namespace."),(0,i.kt)("h3",{id:"presence"},"presence"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"presence")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 enable/disable online presence information for channels in a namespace. "),(0,i.kt)("p",null,"Online presence is information about clients currently subscribed to the channel. It contains each subscriber's client ID, user ID, connection info, and channel info. By default, this option is off so no presence information will be available for channels."),(0,i.kt)("p",null,"Let's say you have a channel ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:index")," and 2 users (with ID ",(0,i.kt)("inlineCode",{parentName:"p"},"2694")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"56"),") subscribed to it. And user ",(0,i.kt)("inlineCode",{parentName:"p"},"2694")," has 2 connections to Centrifugo in different browser tabs. In presence data you may see sth like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "chat:index"}\' \\\n  http://localhost:8000/api/presence\n{\n    "result": {\n        "presence": {\n            "66fdf8d1-06f0-4375-9fac-db959d6ee8d6": {\n                "user": "2694",\n                "client": "66fdf8d1-06f0-4375-9fac-db959d6ee8d6",\n                "conn_info": {"name": "Alex"}\n            },\n            "d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c": {\n                "user": "2694",\n                "client": "d4516dd3-0b6e-4cfe-84e8-0342fd2bb20c",\n                "conn_info": {"name": "Alex"}\n            }\n            "g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c": {\n                "user": "56",\n                "client": "g3216dd3-1b6e-tcfe-14e8-1342fd2bb20c",\n                "conn_info": {"name": "Alice"}\n            }\n        }\n    }\n}\n')),(0,i.kt)("p",null,"To call presence API from the client connection side client must have permission to do so. See ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/channel_permissions#presence-permission-model"},"presence permission model"),"."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Enabling channel online presence adds some overhead since Centrifugo needs to maintain an additional data structure (in a process memory or in a broker memory/disk). So only use it for channels where presence is required.")),(0,i.kt)("p",null,"See more details about ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/design#online-presence-considerations"},"online presence design"),"."),(0,i.kt)("h3",{id:"join_leave"},"join_leave"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"join_leave")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 enable/disable sending join and leave messages when the client subscribes to a channel (unsubscribes from a channel). Join/leave event includes information about the connection that triggered an event \u2013 client ID, user ID, connection info, and channel info (similar to entry inside presence information)."),(0,i.kt)("p",null,"Enabling ",(0,i.kt)("inlineCode",{parentName:"p"},"join_leave")," means that Join/Leave messages will start being emitted, but by default they are not delivered to clients subscribed to a channel. You need to force this using namespace option ",(0,i.kt)("a",{parentName:"p",href:"#forcepushjoinleave"},"force_push_join_leave")," or explicitly provide intent from a client-side (in this case client must have permission to call presence API)."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},'Keep in mind that join/leave messages can generate a huge number of messages in a system if turned on for channels with a large number of active subscribers. If you have channels with a large number of subscribers consider avoiding using this feature. It\'s hard to say what is "large" for you though \u2013 just estimate the load based on the fact that each subscribe/unsubscribe event in a channel with N subscribers will result into N messages broadcasted to all. If all clients reconnect at the same time the amount of generated messages is N^2.')),(0,i.kt)("p",null,"Join/leave messages distributed only with at most once delivery guarantee. "),(0,i.kt)("h3",{id:"force_push_join_leave"},"force_push_join_leave"),(0,i.kt)("p",null,"Boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"When on all clients will receive join/leave events for a channel in a namespace automatically \u2013 without explicit intent to consume join/leave messages from the client side."),(0,i.kt)("p",null,"If pushing join/leave is not forced then client can provide a corresponding Subscription option to enable it \u2013 but it should have permissions to access channel presence (by having an explicit capability or if allowed on a namespace level)."),(0,i.kt)("h3",{id:"history_size"},"history_size"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"history_size")," (integer, default ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),") \u2013 history size (amount of messages) for channels. As Centrifugo keeps all history messages in process memory (or in a broker memory) it's very important to limit the maximum amount of messages in channel history with a reasonable value. ",(0,i.kt)("inlineCode",{parentName:"p"},"history_size")," defines the maximum amount of messages that Centrifugo will keep for ",(0,i.kt)("strong",{parentName:"p"},"each")," channel in the namespace. As soon as history has more messages than defined by history size \u2013 old messages will be evicted."),(0,i.kt)("p",null,"Setting only ",(0,i.kt)("inlineCode",{parentName:"p"},"history_size")," ",(0,i.kt)("strong",{parentName:"p"},"is not enough to enable history in channels")," \u2013 you also need to wisely configure ",(0,i.kt)("inlineCode",{parentName:"p"},"history_ttl")," option (see below). "),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Enabling channel history adds some overhead (both memory and CPU) since Centrifugo needs to maintain an additional data structure (in a process memory or a broker memory/disk). So only use history for channels where it's required.")),(0,i.kt)("h3",{id:"history_ttl"},"history_ttl"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"history_ttl")," (",(0,i.kt)("a",{parentName:"p",href:"/docs/server/configuration#setting-time-duration-options"},"duration"),", default ",(0,i.kt)("inlineCode",{parentName:"p"},"0s"),") \u2013 interval how long to keep channel history messages (with seconds precision)."),(0,i.kt)("p",null,"As all history is storing in process memory (or in a broker memory) it is also very important to get rid of old history data for unused (inactive for a long time) channels."),(0,i.kt)("p",null,"By default history TTL duration is zero \u2013 this means that channel history is disabled."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Again \u2013 to turn on history you should wisely configure both ",(0,i.kt)("inlineCode",{parentName:"strong"},"history_size")," and ",(0,i.kt)("inlineCode",{parentName:"strong"},"history_ttl")," options"),"."),(0,i.kt)("p",null,"For example for top-level channels (which do not belong to a namespace):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n    ...\n    "history_size": 10,\n    "history_ttl": "60s"\n}\n')),(0,i.kt)("p",null,"Let's look at example. You enabled history for a namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"chat")," and sent two messages in channel ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:index"),". Then history will contain sth like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl --header "Content-Type: application/json" \\\n  --header "X-API-Key: <API_KEY>" \\\n  --request POST \\\n  --data \'{"channel": "chat:index", "limit": 100}\' \\\n  http://localhost:8000/api/history\n{\n    "result": {\n        "publications": [\n            {\n                "data": {\n                    "input": "1"\n                },\n                "offset": 1\n            },\n            {\n                "data": {\n                    "input": "2"\n                },\n                "offset": 2\n            }\n        ],\n        "epoch": "gWuY",\n        "offset": 2\n    }\n}\n')),(0,i.kt)("p",null,"To call history API from the client connection side client must have permission to do so. See ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/channel_permissions#history-permission-model"},"history permission model"),"."),(0,i.kt)("p",null,"See additional information about offsets and epoch in ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/history_and_recovery"},"History and recovery")," chapter."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"History persistence properties are dictated by Centrifugo ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/engines"},"engine")," used. For example, when using memory engine history is only kept till Centrifugo node restart. In Redis engine case persistence is determined by a Redis server persistence configuration (same for KeyDB and Tarantool).")),(0,i.kt)("h3",{id:"history_meta_ttl"},"history_meta_ttl"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"history_meta_ttl")," (",(0,i.kt)("a",{parentName:"p",href:"/docs/server/configuration#setting-time-duration-options"},"duration"),") \u2013 sets a time of history stream metadata expiration (with seconds precision)."),(0,i.kt)("p",null,"When using a history in a channel, Centrifugo keeps some metadata for each channel stream. Metadata includes the latest stream offset and its epoch value. In some cases, when channels are created for \u0430 short time and then not used anymore, created metadata can stay in memory while not useful. For example, you can have a personal user channel but after using your app for a while user left it forever. From a long-term perspective, this can be an unwanted memory growth. Setting a reasonable value to this option can help to expire metadata faster (or slower if you need it). The rule of thumb here is to keep this value much bigger than maximum history TTL used in Centrifugo configuration."),(0,i.kt)("p",null,"If not specified Centrifugo uses a global ",(0,i.kt)("inlineCode",{parentName:"p"},"history_meta_ttl")," which is 30 days. This should be a good default for most use cases to avoid tweaking ",(0,i.kt)("inlineCode",{parentName:"p"},"history_meta_ttl")," on a namespace level at all."),(0,i.kt)("h3",{id:"force_positioning"},"force_positioning"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"force_positioning")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 when the ",(0,i.kt)("inlineCode",{parentName:"p"},"force_positioning")," option is on Centrifugo forces all subscriptions in a namespace to be ",(0,i.kt)("inlineCode",{parentName:"p"},"positioned"),". I.e. Centrifugo will try to compensate at most once delivery of PUB/SUB broker checking client position inside a stream."),(0,i.kt)("p",null,"If Centrifugo detects a bad position of the client (i.e. potential message loss) it disconnects a client with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Insufficient state")," disconnect code. Also, when the position option is enabled Centrifugo exposes the current stream top ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," and current ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch")," in subscribe reply making it possible for a client to manually recover its state upon disconnect using history API."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"force_positioning")," option must be used in conjunction with reasonably configured message history for a channel i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"history_size")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"history_ttl")," ",(0,i.kt)("strong",{parentName:"p"},"must be set")," (because Centrifugo uses channel history to check client position in a stream)."),(0,i.kt)("p",null,"If positioning is not forced then client can provide a corresponding Subscription option to enable it \u2013 but it should have permissions to access channel history (by having an explicit capability or if allowed on a namespace level)."),(0,i.kt)("h3",{id:"force_recovery"},"force_recovery"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"force_recovery")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 when the ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," option is on Centrifugo forces all subscriptions in a namespace to be ",(0,i.kt)("inlineCode",{parentName:"p"},"recoverable"),". When enabled Centrifugo will try to recover missed publications in channels after a client reconnects for some reason (bad internet connection for example). Also when the recovery feature is on Centrifugo automatically enables properties of the ",(0,i.kt)("inlineCode",{parentName:"p"},"force_positioning")," option described above."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"force_recovery")," option must be used in conjunction with reasonably configured message history for channel i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"history_size")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"history_ttl")," ",(0,i.kt)("strong",{parentName:"p"},"must be set")," (because Centrifugo uses channel history to recover messages)."),(0,i.kt)("p",null,"If recovery is not forced then client can provide a corresponding Subscription option to enable it \u2013 but it should have permissions to access channel history (by having an explicit capability or if allowed on a namespace level)."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Not all real-time events require this feature turned on so think wisely when you need this. When this option is turned on your application should be designed in a way to tolerate duplicate messages coming from a channel (currently Centrifugo returns recovered publications in order and without duplicates but this is an implementation detail that can be theoretically changed in the future). See more details about how recovery works in ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/history_and_recovery"},"special chapter"),".")),(0,i.kt)("h3",{id:"allow_subscribe_for_client"},"allow_subscribe_for_client"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_subscribe_for_client")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 when on all non-anonymous clients will be able to subscribe to any channel in a namespace. To additionally allow anonymous users to subscribe turn on ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_subscribe_for_anonymous")," (see below)."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Turning this option on effectively makes namespace public \u2013 no subscribe permissions will be checked (only the check that current connection is authenticated - i.e. has non-empty user ID). Make sure this is really what you want in terms of channels security.")),(0,i.kt)("h3",{id:"allow_subscribe_for_anonymous"},"allow_subscribe_for_anonymous"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_subscribe_for_anonymous")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turn on if anonymous clients (with empty user ID) should be able to subscribe on channels in a namespace."),(0,i.kt)("h3",{id:"allow_publish_for_subscriber"},"allow_publish_for_subscriber"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_subscriber")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - when the ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_subscriber")," option is enabled client can publish into a channel in namespace directly from the client side over real-time connection but only if client subscribed to that channel."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Keep in mind that in this case subscriber can publish any payload to a channel \u2013 Centrifugo does not validate input at all. Your app backend won't receive those messages - publications just go through Centrifugo towards channel subscribers. Consider always validate messages which are being published to channels (i.e. using server API to publish after validating input on the backend side, or using ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy#publish-proxy"},"publish proxy")," - see ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/design#idiomatic-usage"},"idiomatic usage"),").")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_subscriber")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_client")," mentioned below) option still can be useful to send something without backend-side validation and saving it into a database \u2013 for example, this option may be handy for demos and quick prototyping real-time app ideas."),(0,i.kt)("h3",{id:"allow_publish_for_client"},"allow_publish_for_client"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_client")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 when on allows clients to publish messages into channels directly (from a client-side). It's like ",(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_subscriber")," \u2013 but client should not be a channel subscriber to publish."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Keep in mind that in this case client can publish any payload to a channel \u2013 Centrifugo does not validate input at all. Your app backend won't receive those messages - publications just go through Centrifugo towards channel subscribers. Consider always validate messages which are being published to channels (i.e. using server API to publish after validating input on the backend side, or using ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy#publish-proxy"},"publish proxy")," - see ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/design#idiomatic-usage"},"idiomatic usage"),").")),(0,i.kt)("h3",{id:"allow_publish_for_anonymous"},"allow_publish_for_anonymous"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_publish_for_anonymous")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turn on if anonymous clients should be able to publish into channels in a namespace."),(0,i.kt)("h3",{id:"allow_history_for_subscriber"},"allow_history_for_subscriber"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_history_for_subscriber")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 allows clients who subscribed on a channel to call history API from that channel."),(0,i.kt)("h3",{id:"allow_history_for_client"},"allow_history_for_client"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_history_for_client")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 allows all clients to call history information in a namespace."),(0,i.kt)("h3",{id:"allow_history_for_anonymous"},"allow_history_for_anonymous"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_history_for_anonymous")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turn on if anonymous clients should be able to call history from channels in a namespace."),(0,i.kt)("h3",{id:"allow_presence_for_subscriber"},"allow_presence_for_subscriber"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_presence_for_subscriber")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 allows clients who subscribed on a channel to call presence information from that channel."),(0,i.kt)("h3",{id:"allow_presence_for_client"},"allow_presence_for_client"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_presence_for_client")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 allows all clients to call presence information in a namespace."),(0,i.kt)("h3",{id:"allow_presence_for_anonymous"},"allow_presence_for_anonymous"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_presence_for_anonymous")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turn on if anonymous clients should be able to call presence from channels in a namespace."),(0,i.kt)("h3",{id:"allow_user_limited_channels"},"allow_user_limited_channels"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"allow_user_limited_channels")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - allows using user-limited channels in a namespace for checking subscribe permission."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If client subscribes to a user-limited channel while this option is off then server rejects subscription with ",(0,i.kt)("inlineCode",{parentName:"p"},"103: permission denied")," error.")),(0,i.kt)("h3",{id:"channel_regex"},"channel_regex"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"channel_regex")," (string, default ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),") \u2013 is an option to set a regular expression for channels allowed in the namespace. By default Centrifugo does not limit channel name variations. For example, if you have a namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"chat"),", then channel names inside this namespace are not really limited, it can be ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:index"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:zzz")," and so on. But if you want to be strict and know possible channel patterns you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"channel_regex")," option. This is especially useful in namespaces where all clients can subscribe to channels. "),(0,i.kt)("p",null,"For example, let's only allow digits after ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:")," for channel names in a ",(0,i.kt)("inlineCode",{parentName:"p"},"chat")," namespace:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "namespaces": [\n    {\n      "name": "chat",\n      "allow_subscribe_for_client": true,\n      "channel_regex": "^[\\d+]$"\n    }\n  ]\n}\n')),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Note, that we are skipping ",(0,i.kt)("inlineCode",{parentName:"p"},"chat:")," part in regex. Since namespace prefix is the same for all channels in a namespace we only match the rest (after the prefix) of channel name.")),(0,i.kt)("p",null,"Channel regex only checked for client-side subscriptions, if you are using server-side subscriptions Centrifugo won't check the regex."),(0,i.kt)("p",null,"Centrifugo uses Go language ",(0,i.kt)("a",{parentName:"p",href:"https://pkg.go.dev/regexp"},"regexp")," package for regular expressions."),(0,i.kt)("h3",{id:"proxy_subscribe"},"proxy_subscribe"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"proxy_subscribe")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turns on subscribe proxy, more info in ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy"},"proxy chapter")),(0,i.kt)("h3",{id:"proxy_publish"},"proxy_publish"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"proxy_publish")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turns on publish proxy, more info in ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy"},"proxy chapter")),(0,i.kt)("h3",{id:"proxy_sub_refresh"},"proxy_sub_refresh"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"proxy_sub_refresh")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") \u2013 turns on sub refresh proxy, more info in ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy"},"proxy chapter")),(0,i.kt)("h3",{id:"proxy_subscribe_stream"},"proxy_subscribe_stream"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"proxy_subscribe_stream")," (boolean, default ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),") - turns on subscribe stream proxy, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy_streams"},"subscription streams")),(0,i.kt)("h3",{id:"subscribe_proxy_name"},"subscribe_proxy_name"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"subscribe_proxy_name")," (string, default ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),") \u2013 turns on subscribe proxy when ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy#granular-proxy-mode"},"granular proxy mode")," is used. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy_subscribe")," option defined above is ignored in granular proxy mode."),(0,i.kt)("h3",{id:"publish_proxy_name"},"publish_proxy_name"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"publish_proxy_name")," (string, default ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),") \u2013 turns on publish proxy when ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy#granular-proxy-mode"},"granular proxy mode")," is used. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy_publish")," option defined above is ignored in granular proxy mode."),(0,i.kt)("h3",{id:"sub_refresh_proxy_name"},"sub_refresh_proxy_name"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"sub_refresh_proxy_name")," (string, default ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),") \u2013 turns on sub refresh proxy when ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy#granular-proxy-mode"},"granular proxy mode")," is used. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy_sub_refresh")," option defined above is ignored in granular proxy mode."),(0,i.kt)("h3",{id:"subscribe_stream_proxy_name"},"subscribe_stream_proxy_name"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"subscribe_stream_proxy_name")," (string, default ",(0,i.kt)("inlineCode",{parentName:"p"},'""'),") \u2013 turns on subscribe stream proxy when ",(0,i.kt)("a",{parentName:"p",href:"/docs/server/proxy_streams#granular-proxy-mode"},"granular proxy mode")," is used. Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy_subscribe_stream")," option defined above is ignored in granular proxy mode."),(0,i.kt)("h2",{id:"channel-config-examples"},"Channel config examples"),(0,i.kt)("p",null,"Let's look at how to set some of these options in a config. In this example we turning on presence, history features, forcing publication recovery. Also allowing all client connections (including anonymous users) to subscribe to channels and call publish, history, presence APIs if subscribed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n    "token_hmac_secret_key": "my-secret-key",\n    "api_key": "secret-api-key",\n    "presence": true,\n    "history_size": 10,\n    "history_ttl": "300s",\n    "force_recovery": true,\n    "allow_subscribe_for_client": true,\n    "allow_subscribe_for_anonymous": true,\n    "allow_publish_for_subscriber": true,\n    "allow_publish_for_anonymous": true,\n    "allow_history_for_subscriber": true,\n    "allow_history_for_anonymous": true,\n    "allow_presence_for_subscriber": true,\n    "allow_presence_for_anonymous": true\n}\n')),(0,i.kt)("p",null,"Here we set channel options on config top-level \u2013 these options will affect channels without namespace. In many cases defining namespaces is a recommended approach so you can manage options for every real-time feature separately. With namespaces the above config may transform to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="config.json"',title:'"config.json"'},'{\n    "token_hmac_secret_key": "my-secret-key",\n    "api_key": "secret-api-key",\n    "namespaces": [\n        {\n            "name": "feed",\n            "presence": true,\n            "history_size": 10,\n            "history_ttl": "300s",\n            "force_recovery": true,\n            "allow_subscribe_for_client": true,\n            "allow_subscribe_for_anonymous": true,\n            "allow_publish_for_subscriber": true,\n            "allow_publish_for_anonymous": true,\n            "allow_history_for_subscriber": true,\n            "allow_history_for_anonymous": true,\n            "allow_presence_for_subscriber": true,\n            "allow_presence_for_anonymous": true\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"In this case channels should be prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"feed:")," to follow the behavior configured for a ",(0,i.kt)("inlineCode",{parentName:"p"},"feed")," namespace."))}u.isMDXComponent=!0},4478:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/pub_sub-eac8caead0bd79c52a8671ea9a0b44db.png"}}]);