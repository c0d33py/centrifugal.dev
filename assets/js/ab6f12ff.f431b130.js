"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[7040],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=s(n),d=o,m=k["".concat(c,".").concat(d)]||k[d]||u[d]||i;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=k;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const i={title:"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket",tags:["centrifugo","keycloak","sso","authentication"],description:"This tutorial shows how to connect to Centrifugo when using Keycloak SSO flow for user authentication. Here we build a simple demo app using React and Vite.",author:"Alexander Emelin",authorTitle:"Author of Centrifugo",authorImageURL:"https://github.com/FZambia.png",image:"/img/keycloak_sso_cover.jpg",hide_table_of_contents:!1},r=void 0,l={permalink:"/blog/2023/03/31/keycloak-sso-centrifugo",editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/blog/2023-03-31-keycloak-sso-centrifugo.md",source:"@site/blog/2023-03-31-keycloak-sso-centrifugo.md",title:"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket",description:"This tutorial shows how to connect to Centrifugo when using Keycloak SSO flow for user authentication. Here we build a simple demo app using React and Vite.",date:"2023-03-31T00:00:00.000Z",formattedDate:"March 31, 2023",tags:[{label:"centrifugo",permalink:"/blog/tags/centrifugo"},{label:"keycloak",permalink:"/blog/tags/keycloak"},{label:"sso",permalink:"/blog/tags/sso"},{label:"authentication",permalink:"/blog/tags/authentication"}],readingTime:4.98,hasTruncateMarker:!0,authors:[{name:"Alexander Emelin",title:"Author of Centrifugo",imageURL:"https://github.com/FZambia.png"}],frontMatter:{title:"Setting up Keycloak SSO authentication flow and connecting to Centrifugo WebSocket",tags:["centrifugo","keycloak","sso","authentication"],description:"This tutorial shows how to connect to Centrifugo when using Keycloak SSO flow for user authentication. Here we build a simple demo app using React and Vite.",author:"Alexander Emelin",authorTitle:"Author of Centrifugo",authorImageURL:"https://github.com/FZambia.png",image:"/img/keycloak_sso_cover.jpg",hide_table_of_contents:!1},prevItem:{title:"Centrifugo v5 released",permalink:"/blog/2023/06/29/centrifugo-v5-released"},nextItem:{title:"Improving Centrifugo Redis Engine throughput and allocation efficiency with Rueidis Go library",permalink:"/blog/2022/12/20/improving-redis-engine-performance"}},c={authorsImageUrls:[void 0]},s=[{value:"TLDR",id:"tldr",level:2},{value:"Keycloak",id:"keycloak",level:2},{value:"Centrifugo",id:"centrifugo",level:2},{value:"React app with Vite",id:"react-app-with-vite",level:2}],p={toc:s};function u(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(4060).Z,width:"1827",height:"855"})),(0,o.kt)("p",null,"Securing user authentication and management can often be a challenging task when developing a modern application. As a result, many developers choose to delegate this responsibility to third-party identity providers, such as Okta, Auth0, or Keycloak."),(0,o.kt)("p",null,"In this blog post, we'll go through the process of setting up Single Sign-On (SSO) authentication using Keycloak - popular and powerful identity provider. After setting up SSO we will create React application and connect to Centrifugo using access token generated by Keycloak for our test user:"),(0,o.kt)("video",{width:"100%",loop:!0,autoPlay:"autoplay",muted:!0,controls:"",src:"/img/keycloak.mp4"}),(0,o.kt)("h2",{id:"tldr"},"TLDR"),(0,o.kt)("p",null,"The integraion is possible since Centrifugo works with ",(0,o.kt)("a",{parentName:"p",href:"/docs/server/authentication"},"standard JWT for authentication")," and additionally ",(0,o.kt)("a",{parentName:"p",href:"https://centrifugal.dev/docs/server/authentication#json-web-key-support"},"supports JSON Web Key")," specification. "),(0,o.kt)("p",null,"Here is a final ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/centrifugal/examples/tree/master/v4/keycloak_sso_auth"},"source code"),"."),(0,o.kt)("h2",{id:"keycloak"},"Keycloak"),(0,o.kt)("p",null,"First, run Keycloak using the following Docker command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it -p 8080:8080 \\\n    -e KEYCLOAK_ADMIN=admin \\\n    -e KEYCLOAK_ADMIN_PASSWORD=admin \\\n    quay.io/keycloak/keycloak:21.0.1 start-dev\n")),(0,o.kt)("p",null,"After starting Keycloak, go to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8080/admin"},"http://localhost:8080/admin")," and login. Then perform the following tasks:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new realm named ",(0,o.kt)("inlineCode",{parentName:"li"},"myrealm"),"."),(0,o.kt)("li",{parentName:"ol"},"Create a new client named ",(0,o.kt)("inlineCode",{parentName:"li"},"myclient"),". Set valid redirect URIs to ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost:5173/*"),", and web origins as ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost:5173"),"."),(0,o.kt)("li",{parentName:"ol"},"Create a user named ",(0,o.kt)("inlineCode",{parentName:"li"},"myuser")," and set a password for it (in Credentials tab).")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://www.keycloak.org/getting-started/getting-started-docker"},"this guide")," for additional details and illustrations of the process."),(0,o.kt)("p",null,"Make sure your created client is ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," (this is default) since we will request token directly from the web application."),(0,o.kt)("h2",{id:"centrifugo"},"Centrifugo"),(0,o.kt)("p",null,"Next, run Centrifugo using the following Docker command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -it -p 8000:8000 \\\n    -e CENTRIFUGO_ALLOWED_ORIGINS="http://localhost:5173" \\\n    -e CENTRIFUGO_TOKEN_JWKS_PUBLIC_ENDPOINT="http://host.docker.internal:8080/realms/myrealm/protocol/openid-connect/certs" \\\n    -e CENTRIFUGO_ALLOW_USER_LIMITED_CHANNELS=true \\\n    -e CENTRIFUGO_ADMIN=true \\\n    -e CENTRIFUGO_ADMIN_SECRET=secret \\\n    -e CENTRIFUGO_ADMIN_PASSWORD=admin \\\n    centrifugo/centrifugo:v4.1.2 centrifugo\n')),(0,o.kt)("p",null,"Some comments about environment variables used here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CENTRIFUGO_TOKEN_JWKS_PUBLIC_ENDPOINT allows tell Centrifugo to use JSON Web Key spec when validating tokens, we point to Keycloak's JWKS endpoint"),(0,o.kt)("li",{parentName:"ul"},"CENTRIFUGO_ALLOWED_ORIGINS is required since we will build Vite + React based app running on http://localhost:5173"),(0,o.kt)("li",{parentName:"ul"},"CENTRIFUGO_ALLOW_USER_LIMITED_CHANNELS - not required to connect, but you will see in the source code that we additionally subscribe to a user personal channel"),(0,o.kt)("li",{parentName:"ul"},"CENTRIFUGO_ADMIN, CENTRIFUGO_ADMIN_SECRET, CENTRIFUGO_ADMIN_PASSWORD - to enable Centrifugo admin web UI")),(0,o.kt)("p",null,"Also note we are using ",(0,o.kt)("inlineCode",{parentName:"p"},"host.docker.internal")," to access host port from inside the Docker network."),(0,o.kt)("h2",{id:"react-app-with-vite"},"React app with Vite"),(0,o.kt)("p",null,"Now, let's create a new React app using very popular ",(0,o.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"Vite")," tool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest keycloak_sso_auth -- --template react\ncd keycloak_sso_auth\nnpm install\n")),(0,o.kt)("p",null,"Also, install the necessary additional packages for the React app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @react-keycloak/web centrifuge keycloak-js\n")),(0,o.kt)("p",null,"And start the development server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:5173/"},"http://localhost:5173/"),". You should see default Vite template working, we are going to modify it a bit."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost"),", not ",(0,o.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," - since we used ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost")," for Keyloak and Centrifugo configurations above.")),(0,o.kt)("p",null,"Add the following into ",(0,o.kt)("inlineCode",{parentName:"p"},"main.jsx"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { ReactKeycloakProvider } from '@react-keycloak/web'\nimport App from './App'\nimport './index.css'\n\nimport Keycloak from \"keycloak-js\";\n\nconst keycloakClient = new Keycloak({\n  url: \"http://localhost:8080\",\n  realm: \"myrealm\",\n  clientId: \"myclient\"\n})\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <ReactKeycloakProvider authClient={keycloakClient}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReactKeycloakProvider>,\n)\n")),(0,o.kt)("p",null,"Note that we configured ",(0,o.kt)("inlineCode",{parentName:"p"},"Keycloak")," instance pointing it to our Keycloak server. We also use ",(0,o.kt)("inlineCode",{parentName:"p"},"@react-keycloak/web")," package to wrap React app into ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactKeycloakProvider")," component. It simplifies working with Keycloak by providing some useful hooks - we are using this hook below."),(0,o.kt)("p",null,"Our ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component inside ",(0,o.kt)("inlineCode",{parentName:"p"},"App.jsx")," may look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, { useState, useEffect } from 'react';\nimport logo from './assets/centrifugo.svg'\nimport { Centrifuge } from \"centrifuge\";\nimport { useKeycloak } from '@react-keycloak/web'\nimport './App.css'\n\nfunction App() {\n  const { keycloak, initialized } = useKeycloak()\n\n  if (!initialized) {\n    return null;\n  }\n\n  return (\n    <div>\n      <header>\n        <p>\n          SSO with Keycloak and Centrifugo\n        </p>\n        {keycloak.authenticated ? (\n          <div>\n            <p>Logged in as {keycloak.tokenParsed?.preferred_username}</p>\n            <button type=\"button\" onClick={() => keycloak.logout()}>\n              Logout\n            </button>\n          </div>\n        ) : (\n          <button type=\"button\" onClick={() => keycloak.login()}>\n            Login\n          </button>\n        )}\n      </header>\n    </div >\n  );\n}\n\nexport default App\n")),(0,o.kt)("p",null,"This is actually enough for SSO flow to start working! You can click on login button and make sure that it's possible to use ",(0,o.kt)("inlineCode",{parentName:"p"},"myuser")," credentials to log into the application. And log out after that."),(0,o.kt)("p",null,"The only missing part is Centrifugo. We can initialize connection inside ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," hook of ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'useEffect(() => {\n  if (!initialized || !keycloak.authenticated) {\n    return;\n  }\n  const centrifuge = new Centrifuge("ws://localhost:8000/connection/websocket", {\n    token: keycloak.token,\n    getToken: function () {\n      return new Promise((resolve, reject) => {\n        keycloak.updateToken(5).then(function () {\n          resolve(keycloak.token);\n        }).catch(function (err) {\n          reject(err);\n          keycloak.logout();\n        });\n      })\n    }\n  });\n\n  centrifuge.connect();\n\n  return () => {\n    centrifuge.disconnect();\n  };\n}, [keycloak, initialized]);\n')),(0,o.kt)("p",null,"The important thing here is how we configure tokens: we are using Keycloak client methods to set initial token and refresh the token when required."),(0,o.kt)("p",null,"I also added some extra elements to the code to make it look a bit nicer. For example, we can listen to Centriffuge client state changes and show connection indicator on the page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function App() {\n  const [connectionState, setConnectionState] = useState("disconnected");\n  const stateToEmoji = {\n    "disconnected": "\ud83d\udd34",\n    "connecting": "\ud83d\udfe0",\n    "connected": "\ud83d\udfe2"\n  }\n  ...\n\n  useEffect(() => {\n    ...\n    centrifuge.on(\'state\', function (ctx) {\n      setConnectionState(ctx.newState);\n    })\n    ...\n\n  return (\n    ...\n    <span className={"connectionState " + connectionState}>\n      {stateToEmoji[connectionState]}\n    </span>\n')),(0,o.kt)("p",null,"You can find more details about Centrifugo client SDK API and states in ",(0,o.kt)("a",{parentName:"p",href:"/docs/transports/client_api"},"client SDK spec"),"."),(0,o.kt)("p",null,"If you look at source code on Github - you will also find an example of channel subscription to a user personal channel:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function App() {\n  ...\n  const [publishedData, setPublishedData] = useState("");\n  ...\n\n  useEffect(() => {\n    ...\n    const userChannel = "#" + keycloak.tokenParsed?.sub;\n    const sub = centrifuge.newSubscription(userChannel);\n    sub.on("publication", function (ctx) {\n      setPublishedData(JSON.stringify(ctx.data));\n    }).subscribe();\n    ...\n')),(0,o.kt)("p",null,"You can now:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"test the SSO setup by logging into application"),(0,o.kt)("li",{parentName:"ul"},"making sure connection is successful"),(0,o.kt)("li",{parentName:"ul"},"try publishing a message into a user channel via the ",(0,o.kt)("a",{parentName:"li",href:"http://localhost:8000/#/actions"},"Centrifugo Web UI"),". The published message will appear on application screen in real-time.")),(0,o.kt)("video",{width:"100%",loop:!0,autoPlay:"autoplay",muted:!0,controls:"",src:"/img/keycloak_publish.mp4"}),(0,o.kt)("p",null,"That's it! We have successfully set up Keycloak SSO authentication with Centrifugo and a React application. Again, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/centrifugal/examples/tree/master/v4/keycloak_sso_auth"},"source code")," is on Github."))}u.isMDXComponent=!0},4060:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/keycloak_sso_cover-daacf4ddab590133cca999d8c13c38ed.jpg"}}]);