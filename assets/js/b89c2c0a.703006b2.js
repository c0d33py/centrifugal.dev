"use strict";(self.webpackChunkcentrifugal_dev=self.webpackChunkcentrifugal_dev||[]).push([[9054],{52665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=n(85893),r=n(11151);const o={id:"client_sdk",title:"Client real-time SDKs"},s=void 0,c={id:"transports/client_sdk",title:"Client real-time SDKs",description:"The following SDKs allow connecting to Centrifugo from the application frontend:",source:"@site/versioned_docs/version-3/transports/client_sdk.md",sourceDirName:"transports",slug:"/transports/client_sdk",permalink:"/docs/3/transports/client_sdk",draft:!1,unlisted:!1,editUrl:"https://github.com/centrifugal/centrifugal.dev/edit/main/versioned_docs/version-3/transports/client_sdk.md",tags:[],version:"3",frontMatter:{id:"client_sdk",title:"Client real-time SDKs"},sidebar:"Transports",previous:{title:"Real-time transports",permalink:"/docs/3/transports/overview"},next:{title:"WebSocket",permalink:"/docs/3/transports/websocket"}},a={},l=[];function d(e){const t={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"The following SDKs allow connecting to Centrifugo from the application frontend:"}),"\n",(0,i.jsx)(t.admonition,{title:"No need in clients for unidirectional approach",type:"info",children:(0,i.jsxs)(t.p,{children:["Client libraries listed here speak Centrifugo bidirectional protocol (WebSocket). If you aim to use unidirectional approach you don't need client connectors \u2013 just use standard APIs. See the difference ",(0,i.jsx)(t.a,{href:"/docs/3/transports/overview",children:"here"}),"."]})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/centrifugal/centrifuge-js",children:"centrifuge-js"})," \u2013 for browser, NodeJS and React Native"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/centrifugal/centrifuge-go",children:"centrifuge-go"})," - for Go language"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/centrifugal/centrifuge-mobile",children:"centrifuge-mobile"})," - for iOS/Android with ",(0,i.jsx)(t.code,{children:"centrifuge-go"})," as basis and ",(0,i.jsx)(t.a,{href:"https://github.com/golang/mobile",children:"gomobile"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/centrifugal/centrifuge-dart",children:"centrifuge-dart"})," - for Dart and Flutter"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/centrifugal/centrifuge-swift",children:"centrifuge-swift"})," \u2013 for native iOS development"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/centrifugal/centrifuge-java",children:"centrifuge-java"})," \u2013 for native Android development and general Java"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["See a description of ",(0,i.jsx)(t.a,{href:"/docs/3/transports/client_protocol",children:"client protocol"})," if you want to write a custom client bidirectional connector."]})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>s});var i=n(67294);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);